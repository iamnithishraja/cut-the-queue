generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  userProfile String?
  email       String   @unique
  phoneNumber String   @unique
  password    String?  // nullable for Google auth users
  googleId    String?  @unique // for Google auth users
  role        UserRole @default(USER)
  orders      Order[]  // relation to orders

  @@index([id])      
  
  @@map("users")
} 

model Canteen {
  id            String     @id @default(cuid())
  name          String
  canteenImage  String?
  menuItems     MenuItem[] // relation to menu items
  orders        Order[]    // relation to orders
  
  @@index([id])
  @@map("canteens")
}

model MenuItem {
  id            String   @id @default(cuid())
  name          String
  description   String?
  itemImage     String?
  price         Float
  limitPerOrder Int
  status        AvailabilityStatus @default(AVAILABLE)
  canteen       Canteen  @relation(fields: [canteenId], references: [id])
  canteenId     String
  orders        Order[]  // the relation to orders does not require fields/references

  @@index([id])     
  @@index([canteenId])     
  
  @@map("menu_items")
}

model Order {
  id          String   @id @default(cuid())
  customer    User     @relation(fields: [userId], references: [id])
  userId      String
  canteen     Canteen  @relation(fields: [canteenId], references: [id])
  canteenId   String
  menuItem    MenuItem @relation(fields: [menuItemId], references: [id])
  menuItemId  String
  quantity    Int      // ensure it doesn't exceed MenuItem.limitPerOrder
  status      OrderStatus @default(WAITING_FOR_PICKUP)
  createdAt   DateTime @default(now())

  @@index([id])
  @@index([userId])     
  @@index([menuItemId]) 
  @@index([canteenId])  
  
  @@map("orders")
}

enum OrderStatus {
  COOKING
  WAITING_FOR_PICKUP
  SENT
}

enum AvailabilityStatus {
  AVAILABLE
  UNAVAILABLE
}

enum UserRole {
  USER
  PARTNER
}